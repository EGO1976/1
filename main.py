import os
import json
import logging
from flask import Flask, request, jsonify
from binance.client import Client
from binance.exceptions import BinanceAPIException
import requests

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–û–í ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

# === –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ï–ô ===
API_KEY = os.getenv("BINANCE_API_KEY")
API_SECRET = os.getenv("BINANCE_API_SECRET")
TG_TOKEN = os.getenv("TG_BOT_TOKEN")
TG_CHAT_ID = os.getenv("TG_CHAT_ID")

app = Flask(__name__)

# === TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
def send_telegram_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    if not TG_TOKEN or not TG_CHAT_ID:
        logging.warning("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (TG_BOT_TOKEN –∏–ª–∏ TG_CHAT_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)")
        return
    try:
        url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
        requests.post(url, json={"chat_id": TG_CHAT_ID, "text": text})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BINANCE ===
try:
    client = Client(API_KEY, API_SECRET)
    account = client.futures_account_balance()
    usdt_balance = next((float(x["balance"]) for x in account if x["asset"] == "USDT"), 0.0)
    logging.info(f"‚úÖ Binance client initialized. USDT balance: {usdt_balance}")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Binance: {e}")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_position_amt(symbol):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É"""
    try:
        positions = client.futures_position_information(symbol=symbol)
        if positions:
            amt = float(positions[0]["positionAmt"])
            return amt
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
    return 0.0


def close_position(symbol, side, position_amt):
    """–ó–∞–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é"""
    try:
        if position_amt == 0:
            return

        close_side = "BUY" if position_amt < 0 else "SELL"
        qty = abs(position_amt)

        res = client.futures_create_order(
            symbol=symbol,
            side=close_side,
            type="MARKET",
            quantity=str(qty),
            reduceOnly=True
        )
        logging.info(f"üîª –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é {symbol}: {close_side} qty={qty}")
        send_telegram_message(f"üîª –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol}: {close_side} qty={qty}")
        return res
    except BinanceAPIException as e:
        logging.error(f"Binance API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ close_position: {e}")


def open_position_notional(symbol, side, notional):
    """–û—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ notional (–≤ USDT) —Å –∞–≤—Ç–æ—Ä–∞—Å—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        price_info = client.futures_mark_price(symbol=symbol)
        price = float(price_info["markPrice"])
        qty = round(float(notional) / price, 3)

        logging.info(f"üöÄ –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é {symbol}: {side} –Ω–∞ {notional} USDT (—Ü–µ–Ω–∞={price}, qty={qty})")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä —Å qty
        res = client.futures_create_order(
            symbol=symbol,
            side=side.upper(),
            type="MARKET",
            quantity=str(qty)
        )

        logging.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {res}")
        send_telegram_message(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol} {side.upper()} qty={qty} (~{notional} USDT)")

    except BinanceAPIException as e:
        logging.error(f"Binance API exception while opening position: {e}")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ open_position_notional: {e}")


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–ê ===
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json()
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {data}")

        symbol = data.get("symbol", "").replace(".P", "")
        side = data.get("side", "").lower()
        notional = float(data.get("amount", 0))
        signal_id = data.get("signalId")

        if not symbol or side not in ("buy", "sell") or not notional:
            return jsonify({"error": "Invalid data"}), 400

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        position_amt = get_position_amt(symbol)
        logging.info(f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è {symbol}: {position_amt}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        if position_amt != 0 and (
            (side == "buy" and position_amt < 0) or
            (side == "sell" and position_amt > 0)
        ):
            close_position(symbol, side, position_amt)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        open_position_notional(symbol, side, notional)
        return jsonify({"status": "ok"}), 200

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞")
        return jsonify({"error": str(e)}), 500


@app.route("/", methods=["GET"])
def index():
    return "‚úÖ Binance Futures Webhook —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω!"


# === –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    logging.info(f"Starting server on port {port}")
    app.run(host="0.0.0.0", port=port)












