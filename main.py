import time
import logging
import requests
from flask import Flask, request, jsonify
from binance.client import Client
from binance.error import BinanceAPIException

# === üîë –í–°–¢–ê–í–¨ –°–í–û–ò –ö–õ–Æ–ß–ò ===
API_KEY = "–¢–í–û–ô_API_KEY"
API_SECRET = "–¢–í–û–ô_API_SECRET"

# === üîî Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = "–¢–í–û–ô_TELEGRAM_BOT_TOKEN"
CHAT_ID = "–¢–í–û–ô_CHAT_ID"  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 684398336

def send_telegram(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    try:
        requests.post(url, json={"chat_id": CHAT_ID, "text": message})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
client = Client(API_KEY, API_SECRET)
app = Flask(__name__)

# === –ö—ç—à –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π ===
positions_cache = {}
active_signals = set()

def get_cached_position(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∫—ç—à–∞ –∏–ª–∏ Binance"""
    now = time.time()
    if symbol in positions_cache and now - positions_cache[symbol]["time"] < 5:
        return positions_cache[symbol]["data"]

    try:
        time.sleep(0.3)
        data = client.futures_position_information(symbol=symbol)
        positions_cache[symbol] = {"data": data, "time": now}
        return data
    except BinanceAPIException as e:
        if e.code == -1003:
            logging.warning("üö´ Rate limit Binance! –ñ–¥—É 3 —Å–µ–∫...")
            time.sleep(3)
            return None
        else:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Binance –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None


@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json()
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {data}")

        symbol = data.get("symbol", "").replace(".P", "")
        side = data.get("side", "").upper()
        notional = float(data.get("amount", 0))
        signal_id = data.get("signalId", "")

        # --- –∞–Ω—Ç–∏–¥—É–±–ª—å ---
        if signal_id in active_signals:
            logging.info(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç —Å–∏–≥–Ω–∞–ª–∞ {signal_id}, –ø—Ä–æ–ø—É—Å–∫")
            return jsonify({"status": "duplicate"}), 200
        active_signals.add(signal_id)

        # --- –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ---
        position_info = get_cached_position(symbol)
        if not position_info:
            return jsonify({"status": "no position info"}), 500

        pos = next((p for p in position_info if p["symbol"] == symbol and p["positionSide"] == "BOTH"), None)
        current_qty = float(pos["positionAmt"]) if pos else 0.0
        mark_price = float(pos["markPrice"]) if pos else 0.0

        # --- –µ—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞, –∑–∞–∫—Ä—ã—Ç—å ---
        if (side == "BUY" and current_qty < 0) or (side == "SELL" and current_qty > 0):
            qty_to_close = abs(current_qty)
            close_side = "BUY" if current_qty < 0 else "SELL"
            logging.info(f"üîª –ó–∞–∫—Ä—ã–≤–∞—é {symbol}: {close_side} qty={qty_to_close}")
            try:
                client.futures_create_order(
                    symbol=symbol,
                    side=close_side,
                    type="MARKET",
                    quantity=qty_to_close,
                    reduceOnly=True
                )
                send_telegram(f"üîª –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol}: {close_side} qty={qty_to_close}")
            except BinanceAPIException as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

        # --- —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ---
        price = mark_price if mark_price > 0 else float(client.futures_mark_price(symbol=symbol)["markPrice"])
        qty = round(notional / price, 3)
        time.sleep(0.2)

        # --- –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é ---
        logging.info(f"üöÄ –û—Ç–∫—Ä—ã–≤–∞—é {symbol}: {side} –Ω–∞ —Å—É–º–º—É {notional} USDT (—Ü–µ–Ω–∞={price}, qty={qty})")
        try:
            res = client.futures_create_order(
                symbol=symbol,
                side=side,
                type="MARKET",
                quantity=qty,
                reduceOnly=False
            )
            logging.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {res}")
            send_telegram(f"‚úÖ {symbol}: {side} –Ω–∞ {notional} USDT (qty={qty}) ‚úÖ")
        except BinanceAPIException as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            send_telegram(f"‚ùå –û—à–∏–±–∫–∞ Binance –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {symbol}: {e}")
            return jsonify({"status": "error", "message": str(e)}), 500

        return jsonify({"status": "ok"}), 200

    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ webhook: {e}")
        send_telegram(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
    try:
        balance = client.futures_account_balance()
        usdt_balance = next((b for b in balance if b["asset"] == "USDT"), None)
        if usdt_balance:
            logging.info(f"‚úÖ Binance client initialized. USDT balance: {usdt_balance['balance']}")
            send_telegram(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance['balance']}")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: {e}")
        send_telegram(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å Binance: {e}")

    logging.info("üöÄ Starting server on port 5000")
    app.run(host="0.0.0.0", port=5000)


