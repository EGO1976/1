import os
import json
import logging
import requests
from flask import Flask, request
from binance.client import Client
from binance.exceptions import BinanceAPIException

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_KEY = "–í–°–¢–ê–í–¨_–°–í–û–ô_API_KEY"
API_SECRET = "–í–°–¢–ê–í–¨_–°–í–û–ô_API_SECRET"
TELEGRAM_TOKEN = "–í–°–¢–ê–í–¨_–°–í–û–ô_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù"
TELEGRAM_CHAT_ID = "684398336"

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

app = Flask(__name__)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø BINANCE ===
try:
    client = Client(API_KEY.strip(), API_SECRET.strip())
    balance = client.futures_account_balance()
    usdt_balance = next((b["balance"] for b in balance if b["asset"] == "USDT"), "0")
    logging.info(f"‚úÖ Binance client initialized. USDT balance: {usdt_balance}")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Binance: {e}")
    client = None


# === –¢–ï–õ–ï–ì–†–ê–ú ===
def send_telegram(text: str):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        requests.post(url, data=data, timeout=10)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_position(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É."""
    try:
        pos_info = client.futures_position_information(symbol=symbol)
        position_amt = float(pos_info[0]["positionAmt"])
        return position_amt
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
        return 0.0


def get_price(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞."""
    try:
        ticker = client.futures_symbol_ticker(symbol=symbol)
        return float(ticker["price"])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
        return 0.0


def open_position(symbol, side, amount_usdt):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USDT."""
    price = get_price(symbol)
    if price == 0:
        logging.error("–¶–µ–Ω–∞ = 0, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return
    qty = round(amount_usdt / price, 3)
    try:
        res = client.futures_create_order(
            symbol=symbol,
            side=side.upper(),
            type="MARKET",
            quantity=qty,
            positionSide="BOTH",
        )
        logging.info(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} {symbol} qty={qty}")
        send_telegram(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} {symbol} –Ω–∞ —Å—É–º–º—É ‚âà {amount_usdt} USDT ({qty} —à—Ç)")
    except BinanceAPIException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")


def close_position(symbol, qty, side):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º."""
    try:
        res = client.futures_create_order(
            symbol=symbol,
            side="BUY" if side.upper() == "SELL" else "SELL",
            type="MARKET",
            quantity=abs(qty),
            positionSide="BOTH",
            reduceOnly=True,
        )
        logging.info(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol} qty={qty}")
        send_telegram(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol} qty={qty}")
    except BinanceAPIException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")


# === –í–ï–ë–•–£–ö ===
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {data}")

    try:
        symbol = data.get("symbol", "").replace(".P", "")
        side = data.get("side", "").lower()
        amount = float(data.get("amount", 0))
        if not symbol or amount <= 0:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", 400

        current_pos = get_position(symbol)
        if current_pos != 0:
            logging.info(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞—é —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é {symbol}: {current_pos}")
            close_position(symbol, current_pos, side)

        open_position(symbol, side, amount)
        return "ok", 200

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return "error", 500


@app.route("/")
def index():
    return "üöÄ Binance Webhook Server —Ä–∞–±–æ—Ç–∞–µ—Ç!"


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)






